using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client._NF.Shipyard.BUI;
using Content.Shared._NF.Bank;
using Content.Shared._NF.Shipyard.BUI;
using Content.Shared._NF.Shipyard.Prototypes;
using Content.Shared._Scav._Shipyard;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using Content.Shared._Scav.Shipyard.BUI;

namespace Content.Client._Scav.Shipyard.UI;

[GenerateTypedNameReferences]
public sealed partial class GarageConsoleMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<ButtonEventArgs>? OnStoreShip;
    public event Action<ButtonEventArgs>? OnShipRetrieved;

    private List<string> _lastAvailableProtos = new();
    private List<string> _lastUnavailableProtos = new();
    private bool _freeListings = false;
    private bool _validId = false;
    private ConfirmButton? _currentlyConfirmingButton = null;

    public GarageConsoleMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Title = Loc.GetString("shipyard-console-menu-title");
        StoreShipButton.OnPressed += (args) => { OnStoreShip?.Invoke(args); };
    }

    /// <summary>
    /// Confirming handler: ensures that only one button is confirming at a time.
    /// </summary>
    private void OnStartConfirmingPurchase(ButtonEventArgs args)
    {
        if (args.Button is not ConfirmButton confirmButton)
            return;

        if (_currentlyConfirmingButton != null)
            _currentlyConfirmingButton.ClearIsConfirming();
        _currentlyConfirmingButton = confirmButton;
    }

    public void UpdateState(GarageConsoleInterfaceState state)
    {
        StoreShipButton.Disabled = state.ShipDeedTitle == null;
        TargetIdButton.Text = state.IsTargetIdPresent
            ? Loc.GetString("id-card-console-window-eject-button")
            : Loc.GetString("id-card-console-window-insert-button");
        if (state.ShipDeedTitle != null)
        {
            DeedTitle.Text = state.ShipDeedTitle;
        }
        else
        {
            DeedTitle.Text = $"None";
        }
        //_freeListings = state.FreeListings;
        _validId = state.IsTargetIdPresent;
    }

    /// <summary>
    ///     Populates the ships to render on the ui
    /// </summary>
    public void PopulateShips(List<ShipData> ships)
    {
        Ships.RemoveAllChildren();

        foreach (var ship in ships)
        {
            var shipEntry = new ShipRow
            {
                ShipId = ship.ShipId,
                ShipName = { Text = ship.ShipName + " " + ship.ShipNameSuffix },
                Retrieve = { Text = Loc.GetString("garage-console-retrieve-available"), Disabled = ship.Active}
            };

            shipEntry.Retrieve.OnConfirming += OnStartConfirming;
            shipEntry.Retrieve.OnPressed += (args) => { OnShipRetrieved?.Invoke(args); };
            Ships.AddChild(shipEntry);
        }
    }

    /// <summary>
    /// Confirming handler: ensures that only one button is confirming at a time.
    /// </summary>
    private void OnStartConfirming(ButtonEventArgs args)
    {
        if (args.Button is not ConfirmButton confirmButton)
            return;

        if (_currentlyConfirmingButton != null)
            _currentlyConfirmingButton.ClearIsConfirming();
        _currentlyConfirmingButton = confirmButton;
    }

}
